{"/home/travis/build/npmtest/node-npmtest-webpack-shell-plugin/test.js":"/* istanbul instrument in package npmtest_webpack_shell_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-shell-plugin/lib.npmtest_webpack_shell_plugin.js":"/* istanbul instrument in package npmtest_webpack_shell_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webpack_shell_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webpack_shell_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-shell-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webpack-shell-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webpack_shell_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webpack_shell_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webpack_shell_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webpack_shell_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webpack_shell_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webpack_shell_plugin.__dirname + '/lib.npmtest_webpack_shell_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-shell-plugin/node_modules/webpack-shell-plugin/lib/index.js":"'use strict';\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar toArray = function (arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nvar spawn = require('child_process').spawn;\nvar exec = require('child_process').exec;\nvar os = require('os');\n\nvar defaultOptions = {\n  onBuildStart: [],\n  onBuildEnd: [],\n  onBuildExit: [],\n  dev: true,\n  verbose: false,\n  safe: false\n};\n\nvar WebpackShellPlugin = function () {\n  function WebpackShellPlugin(options) {\n    classCallCheck(this, WebpackShellPlugin);\n\n    this.options = this.validateInput(this.mergeOptions(options, defaultOptions));\n  }\n\n  createClass(WebpackShellPlugin, [{\n    key: 'puts',\n    value: function puts(error, stdout, stderr) {\n      if (error) {\n        throw error;\n      }\n    }\n  }, {\n    key: 'spreadStdoutAndStdErr',\n    value: function spreadStdoutAndStdErr(proc) {\n      proc.stdout.pipe(process.stdout);\n      proc.stderr.pipe(process.stdout);\n    }\n  }, {\n    key: 'serializeScript',\n    value: function serializeScript(script) {\n      if (typeof script === 'string') {\n        var _script$split = script.split(' '),\n            _script$split2 = toArray(_script$split),\n            _command = _script$split2[0],\n            _args = _script$split2.slice(1);\n\n        return { command: _command, args: _args };\n      }\n      var command = script.command,\n          args = script.args;\n\n      return { command: command, args: args };\n    }\n  }, {\n    key: 'handleScript',\n    value: function handleScript(script) {\n      if (os.platform() === 'win32' || this.options.safe) {\n        this.spreadStdoutAndStdErr(exec(script, this.puts));\n      } else {\n        var _serializeScript = this.serializeScript(script),\n            command = _serializeScript.command,\n            args = _serializeScript.args;\n\n        var proc = spawn(command, args, { stdio: 'inherit' });\n        proc.on('close', this.puts);\n      }\n    }\n  }, {\n    key: 'validateInput',\n    value: function validateInput(options) {\n      if (typeof options.onBuildStart === 'string') {\n        options.onBuildStart = options.onBuildStart.split('&&');\n      }\n      if (typeof options.onBuildEnd === 'string') {\n        options.onBuildEnd = options.onBuildEnd.split('&&');\n      }\n      if (typeof options.onBuildExit === 'string') {\n        options.onBuildExit = options.onBuildExit.split('&&');\n      }\n      return options;\n    }\n  }, {\n    key: 'mergeOptions',\n    value: function mergeOptions(options, defaults) {\n      for (var key in defaults) {\n        if (options.hasOwnProperty(key)) {\n          defaults[key] = options[key];\n        }\n      }\n      return defaults;\n    }\n  }, {\n    key: 'apply',\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.plugin('compilation', function (compilation) {\n        if (_this.options.verbose) {\n          console.log('Report compilation: ' + compilation);\n          console.warn('WebpackShellPlugin [' + new Date() + ']: Verbose is being deprecated, please remove.');\n        }\n        if (_this.options.onBuildStart.length) {\n          console.log('Executing pre-build scripts');\n          for (var i = 0; i < _this.options.onBuildStart.length; i++) {\n            _this.handleScript(_this.options.onBuildStart[i]);\n          }\n          if (_this.options.dev) {\n            _this.options.onBuildStart = [];\n          }\n        }\n      });\n\n      compiler.plugin('after-emit', function (compilation, callback) {\n        if (_this.options.onBuildEnd.length) {\n          console.log('Executing post-build scripts');\n          for (var i = 0; i < _this.options.onBuildEnd.length; i++) {\n            _this.handleScript(_this.options.onBuildEnd[i]);\n          }\n          if (_this.options.dev) {\n            _this.options.onBuildEnd = [];\n          }\n        }\n        callback();\n      });\n\n      compiler.plugin('done', function () {\n        if (_this.options.onBuildExit.length) {\n          console.log('Executing additional scripts before exit');\n          for (var i = 0; i < _this.options.onBuildExit.length; i++) {\n            _this.handleScript(_this.options.onBuildExit[i]);\n          }\n        }\n      });\n    }\n  }]);\n  return WebpackShellPlugin;\n}();\n\nmodule.exports = WebpackShellPlugin;","/home/travis/build/npmtest/node-npmtest-webpack-shell-plugin/node_modules/webpack-shell-plugin/webpack.config.js":"const path = require('path');\nconst webpack = require('webpack');\n\nconst WebpackShellPlugin = require('./lib');\n\nmodule.exports = {\n  watch: true,\n  entry: path.resolve(__dirname, 'test/entry.js'),\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  /*devServer: {\n    contentBase: path.resolve(__dirname, 'test')\n  },*/\n  module: {\n    loaders: [\n      { test: /\\.css$/, loader: 'style!css' }\n    ]\n  },\n  plugins: [\n    new WebpackShellPlugin({onBuildStart:['node test.js'], onBuildEnd:['echo \"Webpack End\"'], safe: true, verbose: true}),\n    new webpack.HotModuleReplacementPlugin()\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-webpack-shell-plugin/node_modules/webpack-shell-plugin/src/webpack-shell-plugin.js":"const spawn = require('child_process').spawn;\nconst exec = require('child_process').exec;\nconst os = require('os');\n\nconst defaultOptions = {\n  onBuildStart: [],\n  onBuildEnd: [],\n  onBuildExit: [],\n  dev: true,\n  verbose: false,\n  safe: false\n};\n\nexport default class WebpackShellPlugin {\n  constructor(options) {\n    this.options = this.validateInput(this.mergeOptions(options, defaultOptions));\n  }\n\n  puts(error, stdout, stderr) {\n    if (error) {\n      throw error;\n    }\n  }\n\n  spreadStdoutAndStdErr(proc) {\n    proc.stdout.pipe(process.stdout);\n    proc.stderr.pipe(process.stdout);\n  }\n\n  serializeScript(script) {\n    if (typeof script === 'string') {\n      const [command, ...args] = script.split(' ');\n      return {command, args};\n    }\n    const {command, args} = script;\n    return {command, args};\n  }\n\n  handleScript(script) {\n    if (os.platform() === 'win32' || this.options.safe) {\n      this.spreadStdoutAndStdErr(exec(script, this.puts));\n    } else {\n      const {command, args} = this.serializeScript(script);\n      const proc = spawn(command, args, {stdio: 'inherit'});\n      proc.on('close', this.puts);\n    }\n  }\n\n  validateInput(options) {\n    if (typeof options.onBuildStart === 'string') {\n      options.onBuildStart = options.onBuildStart.split('&&');\n    }\n    if (typeof options.onBuildEnd === 'string') {\n      options.onBuildEnd = options.onBuildEnd.split('&&');\n    }\n    if (typeof options.onBuildExit === 'string') {\n      options.onBuildExit = options.onBuildExit.split('&&');\n    }\n    return options;\n  }\n\n  mergeOptions(options, defaults) {\n    for (const key in defaults) {\n      if (options.hasOwnProperty(key)) {\n        defaults[key] = options[key];\n      }\n    }\n    return defaults;\n  }\n\n  apply(compiler) {\n\n    compiler.plugin('compilation', (compilation) => {\n      if (this.options.verbose) {\n        console.log(`Report compilation: ${compilation}`);\n        console.warn(`WebpackShellPlugin [${new Date()}]: Verbose is being deprecated, please remove.`);\n      }\n      if (this.options.onBuildStart.length) {\n        console.log('Executing pre-build scripts');\n        for (let i = 0; i < this.options.onBuildStart.length; i++) {\n          this.handleScript(this.options.onBuildStart[i]);\n        }\n        if (this.options.dev) {\n          this.options.onBuildStart = [];\n        }\n      }\n    });\n\n    compiler.plugin('after-emit', (compilation, callback) => {\n      if (this.options.onBuildEnd.length) {\n        console.log('Executing post-build scripts');\n        for (let i = 0; i < this.options.onBuildEnd.length; i++) {\n          this.handleScript(this.options.onBuildEnd[i]);\n        }\n        if (this.options.dev) {\n          this.options.onBuildEnd = [];\n        }\n      }\n      callback();\n    });\n\n    compiler.plugin('done', () => {\n      if (this.options.onBuildExit.length) {\n        console.log('Executing additional scripts before exit');\n        for (let i = 0; i < this.options.onBuildExit.length; i++) {\n          this.handleScript(this.options.onBuildExit[i]);\n        }\n      }\n    });\n  }\n}\n"}